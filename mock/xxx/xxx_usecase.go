// Code generated by MockGen. DO NOT EDIT.
// Source: xxx_usecase.go

// Package mock_xxx is a generated GoMock package.
package mock_xxx

import (
	context "context"
	reflect "reflect"
	xxx "xxx/app/domain/xxx"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(ctx context.Context, dto *xxx.UsecaseCreateDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx, dto)
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), ctx, dto)
}

// Delete mocks base method.
func (m *MockUsecase) Delete(ctx context.Context, dto *xxx.UsecaseDeleteDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, dto)
}

// Delete indicates an expected call of Delete.
func (mr *MockUsecaseMockRecorder) Delete(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsecase)(nil).Delete), ctx, dto)
}

// Read mocks base method.
func (m *MockUsecase) Read(ctx context.Context, dto *xxx.UsecaseReadDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Read", ctx, dto)
}

// Read indicates an expected call of Read.
func (mr *MockUsecaseMockRecorder) Read(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUsecase)(nil).Read), ctx, dto)
}

// ReadAll mocks base method.
func (m *MockUsecase) ReadAll(ctx context.Context, dto *xxx.UsecaseReadAllDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadAll", ctx, dto)
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockUsecaseMockRecorder) ReadAll(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockUsecase)(nil).ReadAll), ctx, dto)
}

// Update mocks base method.
func (m *MockUsecase) Update(ctx context.Context, dto *xxx.UsecaseUpdateDto) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", ctx, dto)
}

// Update indicates an expected call of Update.
func (mr *MockUsecaseMockRecorder) Update(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), ctx, dto)
}
