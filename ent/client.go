// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"clean/ent/migrate"

	"clean/ent/fuga"
	"clean/ent/hoge"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Fuga is the client for interacting with the Fuga builders.
	Fuga *FugaClient
	// Hoge is the client for interacting with the Hoge builders.
	Hoge *HogeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Fuga = NewFugaClient(c.config)
	c.Hoge = NewHogeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Fuga:   NewFugaClient(cfg),
		Hoge:   NewHogeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config: cfg,
		Fuga:   NewFugaClient(cfg),
		Hoge:   NewHogeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Fuga.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Fuga.Use(hooks...)
	c.Hoge.Use(hooks...)
}

// FugaClient is a client for the Fuga schema.
type FugaClient struct {
	config
}

// NewFugaClient returns a client for the Fuga from the given config.
func NewFugaClient(c config) *FugaClient {
	return &FugaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fuga.Hooks(f(g(h())))`.
func (c *FugaClient) Use(hooks ...Hook) {
	c.hooks.Fuga = append(c.hooks.Fuga, hooks...)
}

// Create returns a create builder for Fuga.
func (c *FugaClient) Create() *FugaCreate {
	mutation := newFugaMutation(c.config, OpCreate)
	return &FugaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fuga entities.
func (c *FugaClient) CreateBulk(builders ...*FugaCreate) *FugaCreateBulk {
	return &FugaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fuga.
func (c *FugaClient) Update() *FugaUpdate {
	mutation := newFugaMutation(c.config, OpUpdate)
	return &FugaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FugaClient) UpdateOne(f *Fuga) *FugaUpdateOne {
	mutation := newFugaMutation(c.config, OpUpdateOne, withFuga(f))
	return &FugaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FugaClient) UpdateOneID(id uuid.UUID) *FugaUpdateOne {
	mutation := newFugaMutation(c.config, OpUpdateOne, withFugaID(id))
	return &FugaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fuga.
func (c *FugaClient) Delete() *FugaDelete {
	mutation := newFugaMutation(c.config, OpDelete)
	return &FugaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FugaClient) DeleteOne(f *Fuga) *FugaDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FugaClient) DeleteOneID(id uuid.UUID) *FugaDeleteOne {
	builder := c.Delete().Where(fuga.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FugaDeleteOne{builder}
}

// Query returns a query builder for Fuga.
func (c *FugaClient) Query() *FugaQuery {
	return &FugaQuery{
		config: c.config,
	}
}

// Get returns a Fuga entity by its id.
func (c *FugaClient) Get(ctx context.Context, id uuid.UUID) (*Fuga, error) {
	return c.Query().Where(fuga.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FugaClient) GetX(ctx context.Context, id uuid.UUID) *Fuga {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FugaClient) Hooks() []Hook {
	return c.hooks.Fuga
}

// HogeClient is a client for the Hoge schema.
type HogeClient struct {
	config
}

// NewHogeClient returns a client for the Hoge from the given config.
func NewHogeClient(c config) *HogeClient {
	return &HogeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hoge.Hooks(f(g(h())))`.
func (c *HogeClient) Use(hooks ...Hook) {
	c.hooks.Hoge = append(c.hooks.Hoge, hooks...)
}

// Create returns a create builder for Hoge.
func (c *HogeClient) Create() *HogeCreate {
	mutation := newHogeMutation(c.config, OpCreate)
	return &HogeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hoge entities.
func (c *HogeClient) CreateBulk(builders ...*HogeCreate) *HogeCreateBulk {
	return &HogeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hoge.
func (c *HogeClient) Update() *HogeUpdate {
	mutation := newHogeMutation(c.config, OpUpdate)
	return &HogeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HogeClient) UpdateOne(h *Hoge) *HogeUpdateOne {
	mutation := newHogeMutation(c.config, OpUpdateOne, withHoge(h))
	return &HogeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HogeClient) UpdateOneID(id uuid.UUID) *HogeUpdateOne {
	mutation := newHogeMutation(c.config, OpUpdateOne, withHogeID(id))
	return &HogeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hoge.
func (c *HogeClient) Delete() *HogeDelete {
	mutation := newHogeMutation(c.config, OpDelete)
	return &HogeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HogeClient) DeleteOne(h *Hoge) *HogeDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HogeClient) DeleteOneID(id uuid.UUID) *HogeDeleteOne {
	builder := c.Delete().Where(hoge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HogeDeleteOne{builder}
}

// Query returns a query builder for Hoge.
func (c *HogeClient) Query() *HogeQuery {
	return &HogeQuery{
		config: c.config,
	}
}

// Get returns a Hoge entity by its id.
func (c *HogeClient) Get(ctx context.Context, id uuid.UUID) (*Hoge, error) {
	return c.Query().Where(hoge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HogeClient) GetX(ctx context.Context, id uuid.UUID) *Hoge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HogeClient) Hooks() []Hook {
	return c.hooks.Hoge
}
