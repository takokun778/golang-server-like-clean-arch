// Code generated by entc, DO NOT EDIT.

package ent

import (
	"clean/ent/hoge"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Hoge is the model entity for the Hoge schema.
type Hoge struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Number holds the value of the "number" field.
	Number int32 `json:"number,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hoge) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hoge.FieldNumber:
			values[i] = new(sql.NullInt64)
		case hoge.FieldName:
			values[i] = new(sql.NullString)
		case hoge.FieldCreatedAt, hoge.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hoge.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hoge", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hoge fields.
func (h *Hoge) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hoge.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				h.ID = *value
			}
		case hoge.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case hoge.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				h.Number = int32(value.Int64)
			}
		case hoge.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case hoge.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Hoge.
// Note that you need to call Hoge.Unwrap() before calling this method if this Hoge
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hoge) Update() *HogeUpdateOne {
	return (&HogeClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hoge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hoge) Unwrap() *Hoge {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hoge is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hoge) String() string {
	var builder strings.Builder
	builder.WriteString("Hoge(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", name=")
	builder.WriteString(h.Name)
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", h.Number))
	builder.WriteString(", createdAt=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Hoges is a parsable slice of Hoge.
type Hoges []*Hoge

func (h Hoges) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
