// Code generated by entc, DO NOT EDIT.

package ent

import (
	"clean/ent/fuga"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Fuga is the model entity for the Fuga schema.
type Fuga struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Number holds the value of the "number" field.
	Number int32 `json:"number,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fuga) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fuga.FieldNumber:
			values[i] = new(sql.NullInt64)
		case fuga.FieldName:
			values[i] = new(sql.NullString)
		case fuga.FieldCreatedAt, fuga.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fuga.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Fuga", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fuga fields.
func (f *Fuga) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fuga.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case fuga.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case fuga.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				f.Number = int32(value.Int64)
			}
		case fuga.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case fuga.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Fuga.
// Note that you need to call Fuga.Unwrap() before calling this method if this Fuga
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fuga) Update() *FugaUpdateOne {
	return (&FugaClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Fuga entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fuga) Unwrap() *Fuga {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fuga is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fuga) String() string {
	var builder strings.Builder
	builder.WriteString("Fuga(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", f.Number))
	builder.WriteString(", createdAt=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Fugas is a parsable slice of Fuga.
type Fugas []*Fuga

func (f Fugas) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
