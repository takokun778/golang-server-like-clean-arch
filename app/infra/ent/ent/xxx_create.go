// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"xxx/app/infra/ent/ent/xxx"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// XxxCreate is the builder for creating a Xxx entity.
type XxxCreate struct {
	config
	mutation *XxxMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (xc *XxxCreate) SetName(s string) *XxxCreate {
	xc.mutation.SetName(s)
	return xc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (xc *XxxCreate) SetNillableName(s *string) *XxxCreate {
	if s != nil {
		xc.SetName(*s)
	}
	return xc
}

// SetNumber sets the "number" field.
func (xc *XxxCreate) SetNumber(i int) *XxxCreate {
	xc.mutation.SetNumber(i)
	return xc
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (xc *XxxCreate) SetNillableNumber(i *int) *XxxCreate {
	if i != nil {
		xc.SetNumber(*i)
	}
	return xc
}

// SetCreatedAt sets the "createdAt" field.
func (xc *XxxCreate) SetCreatedAt(t time.Time) *XxxCreate {
	xc.mutation.SetCreatedAt(t)
	return xc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (xc *XxxCreate) SetNillableCreatedAt(t *time.Time) *XxxCreate {
	if t != nil {
		xc.SetCreatedAt(*t)
	}
	return xc
}

// SetUpdatedAt sets the "updatedAt" field.
func (xc *XxxCreate) SetUpdatedAt(t time.Time) *XxxCreate {
	xc.mutation.SetUpdatedAt(t)
	return xc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (xc *XxxCreate) SetNillableUpdatedAt(t *time.Time) *XxxCreate {
	if t != nil {
		xc.SetUpdatedAt(*t)
	}
	return xc
}

// SetID sets the "id" field.
func (xc *XxxCreate) SetID(u uuid.UUID) *XxxCreate {
	xc.mutation.SetID(u)
	return xc
}

// Mutation returns the XxxMutation object of the builder.
func (xc *XxxCreate) Mutation() *XxxMutation {
	return xc.mutation
}

// Save creates the Xxx in the database.
func (xc *XxxCreate) Save(ctx context.Context) (*Xxx, error) {
	var (
		err  error
		node *Xxx
	)
	xc.defaults()
	if len(xc.hooks) == 0 {
		if err = xc.check(); err != nil {
			return nil, err
		}
		node, err = xc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XxxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = xc.check(); err != nil {
				return nil, err
			}
			xc.mutation = mutation
			if node, err = xc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(xc.hooks) - 1; i >= 0; i-- {
			if xc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (xc *XxxCreate) SaveX(ctx context.Context) *Xxx {
	v, err := xc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xc *XxxCreate) Exec(ctx context.Context) error {
	_, err := xc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xc *XxxCreate) ExecX(ctx context.Context) {
	if err := xc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xc *XxxCreate) defaults() {
	if _, ok := xc.mutation.CreatedAt(); !ok {
		v := xxx.DefaultCreatedAt()
		xc.mutation.SetCreatedAt(v)
	}
	if _, ok := xc.mutation.UpdatedAt(); !ok {
		v := xxx.DefaultUpdatedAt()
		xc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xc *XxxCreate) check() error {
	if _, ok := xc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := xc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	return nil
}

func (xc *XxxCreate) sqlSave(ctx context.Context) (*Xxx, error) {
	_node, _spec := xc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (xc *XxxCreate) createSpec() (*Xxx, *sqlgraph.CreateSpec) {
	var (
		_node = &Xxx{config: xc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: xxx.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: xxx.FieldID,
			},
		}
	)
	if id, ok := xc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := xc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xxx.FieldName,
		})
		_node.Name = value
	}
	if value, ok := xc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: xxx.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := xc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xxx.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := xc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xxx.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// XxxCreateBulk is the builder for creating many Xxx entities in bulk.
type XxxCreateBulk struct {
	config
	builders []*XxxCreate
}

// Save creates the Xxx entities in the database.
func (xcb *XxxCreateBulk) Save(ctx context.Context) ([]*Xxx, error) {
	specs := make([]*sqlgraph.CreateSpec, len(xcb.builders))
	nodes := make([]*Xxx, len(xcb.builders))
	mutators := make([]Mutator, len(xcb.builders))
	for i := range xcb.builders {
		func(i int, root context.Context) {
			builder := xcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XxxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xcb *XxxCreateBulk) SaveX(ctx context.Context) []*Xxx {
	v, err := xcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xcb *XxxCreateBulk) Exec(ctx context.Context) error {
	_, err := xcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcb *XxxCreateBulk) ExecX(ctx context.Context) {
	if err := xcb.Exec(ctx); err != nil {
		panic(err)
	}
}
