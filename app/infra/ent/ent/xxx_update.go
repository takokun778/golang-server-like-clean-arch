// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"xxx/app/infra/ent/ent/predicate"
	"xxx/app/infra/ent/ent/xxx"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// XxxUpdate is the builder for updating Xxx entities.
type XxxUpdate struct {
	config
	hooks    []Hook
	mutation *XxxMutation
}

// Where appends a list predicates to the XxxUpdate builder.
func (xu *XxxUpdate) Where(ps ...predicate.Xxx) *XxxUpdate {
	xu.mutation.Where(ps...)
	return xu
}

// SetName sets the "name" field.
func (xu *XxxUpdate) SetName(s string) *XxxUpdate {
	xu.mutation.SetName(s)
	return xu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (xu *XxxUpdate) SetNillableName(s *string) *XxxUpdate {
	if s != nil {
		xu.SetName(*s)
	}
	return xu
}

// ClearName clears the value of the "name" field.
func (xu *XxxUpdate) ClearName() *XxxUpdate {
	xu.mutation.ClearName()
	return xu
}

// SetNumber sets the "number" field.
func (xu *XxxUpdate) SetNumber(i int) *XxxUpdate {
	xu.mutation.ResetNumber()
	xu.mutation.SetNumber(i)
	return xu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (xu *XxxUpdate) SetNillableNumber(i *int) *XxxUpdate {
	if i != nil {
		xu.SetNumber(*i)
	}
	return xu
}

// AddNumber adds i to the "number" field.
func (xu *XxxUpdate) AddNumber(i int) *XxxUpdate {
	xu.mutation.AddNumber(i)
	return xu
}

// ClearNumber clears the value of the "number" field.
func (xu *XxxUpdate) ClearNumber() *XxxUpdate {
	xu.mutation.ClearNumber()
	return xu
}

// SetCreatedAt sets the "createdAt" field.
func (xu *XxxUpdate) SetCreatedAt(t time.Time) *XxxUpdate {
	xu.mutation.SetCreatedAt(t)
	return xu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (xu *XxxUpdate) SetNillableCreatedAt(t *time.Time) *XxxUpdate {
	if t != nil {
		xu.SetCreatedAt(*t)
	}
	return xu
}

// SetUpdatedAt sets the "updatedAt" field.
func (xu *XxxUpdate) SetUpdatedAt(t time.Time) *XxxUpdate {
	xu.mutation.SetUpdatedAt(t)
	return xu
}

// Mutation returns the XxxMutation object of the builder.
func (xu *XxxUpdate) Mutation() *XxxMutation {
	return xu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xu *XxxUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	xu.defaults()
	if len(xu.hooks) == 0 {
		affected, err = xu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XxxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			xu.mutation = mutation
			affected, err = xu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(xu.hooks) - 1; i >= 0; i-- {
			if xu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (xu *XxxUpdate) SaveX(ctx context.Context) int {
	affected, err := xu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xu *XxxUpdate) Exec(ctx context.Context) error {
	_, err := xu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xu *XxxUpdate) ExecX(ctx context.Context) {
	if err := xu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xu *XxxUpdate) defaults() {
	if _, ok := xu.mutation.UpdatedAt(); !ok {
		v := xxx.UpdateDefaultUpdatedAt()
		xu.mutation.SetUpdatedAt(v)
	}
}

func (xu *XxxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   xxx.Table,
			Columns: xxx.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: xxx.FieldID,
			},
		},
	}
	if ps := xu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xxx.FieldName,
		})
	}
	if xu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: xxx.FieldName,
		})
	}
	if value, ok := xu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: xxx.FieldNumber,
		})
	}
	if value, ok := xu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: xxx.FieldNumber,
		})
	}
	if xu.mutation.NumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: xxx.FieldNumber,
		})
	}
	if value, ok := xu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xxx.FieldCreatedAt,
		})
	}
	if value, ok := xu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xxx.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xxx.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// XxxUpdateOne is the builder for updating a single Xxx entity.
type XxxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *XxxMutation
}

// SetName sets the "name" field.
func (xuo *XxxUpdateOne) SetName(s string) *XxxUpdateOne {
	xuo.mutation.SetName(s)
	return xuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (xuo *XxxUpdateOne) SetNillableName(s *string) *XxxUpdateOne {
	if s != nil {
		xuo.SetName(*s)
	}
	return xuo
}

// ClearName clears the value of the "name" field.
func (xuo *XxxUpdateOne) ClearName() *XxxUpdateOne {
	xuo.mutation.ClearName()
	return xuo
}

// SetNumber sets the "number" field.
func (xuo *XxxUpdateOne) SetNumber(i int) *XxxUpdateOne {
	xuo.mutation.ResetNumber()
	xuo.mutation.SetNumber(i)
	return xuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (xuo *XxxUpdateOne) SetNillableNumber(i *int) *XxxUpdateOne {
	if i != nil {
		xuo.SetNumber(*i)
	}
	return xuo
}

// AddNumber adds i to the "number" field.
func (xuo *XxxUpdateOne) AddNumber(i int) *XxxUpdateOne {
	xuo.mutation.AddNumber(i)
	return xuo
}

// ClearNumber clears the value of the "number" field.
func (xuo *XxxUpdateOne) ClearNumber() *XxxUpdateOne {
	xuo.mutation.ClearNumber()
	return xuo
}

// SetCreatedAt sets the "createdAt" field.
func (xuo *XxxUpdateOne) SetCreatedAt(t time.Time) *XxxUpdateOne {
	xuo.mutation.SetCreatedAt(t)
	return xuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (xuo *XxxUpdateOne) SetNillableCreatedAt(t *time.Time) *XxxUpdateOne {
	if t != nil {
		xuo.SetCreatedAt(*t)
	}
	return xuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (xuo *XxxUpdateOne) SetUpdatedAt(t time.Time) *XxxUpdateOne {
	xuo.mutation.SetUpdatedAt(t)
	return xuo
}

// Mutation returns the XxxMutation object of the builder.
func (xuo *XxxUpdateOne) Mutation() *XxxMutation {
	return xuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xuo *XxxUpdateOne) Select(field string, fields ...string) *XxxUpdateOne {
	xuo.fields = append([]string{field}, fields...)
	return xuo
}

// Save executes the query and returns the updated Xxx entity.
func (xuo *XxxUpdateOne) Save(ctx context.Context) (*Xxx, error) {
	var (
		err  error
		node *Xxx
	)
	xuo.defaults()
	if len(xuo.hooks) == 0 {
		node, err = xuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XxxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			xuo.mutation = mutation
			node, err = xuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(xuo.hooks) - 1; i >= 0; i-- {
			if xuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (xuo *XxxUpdateOne) SaveX(ctx context.Context) *Xxx {
	node, err := xuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xuo *XxxUpdateOne) Exec(ctx context.Context) error {
	_, err := xuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xuo *XxxUpdateOne) ExecX(ctx context.Context) {
	if err := xuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xuo *XxxUpdateOne) defaults() {
	if _, ok := xuo.mutation.UpdatedAt(); !ok {
		v := xxx.UpdateDefaultUpdatedAt()
		xuo.mutation.SetUpdatedAt(v)
	}
}

func (xuo *XxxUpdateOne) sqlSave(ctx context.Context) (_node *Xxx, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   xxx.Table,
			Columns: xxx.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: xxx.FieldID,
			},
		},
	}
	id, ok := xuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Xxx.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := xuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xxx.FieldID)
		for _, f := range fields {
			if !xxx.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != xxx.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xxx.FieldName,
		})
	}
	if xuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: xxx.FieldName,
		})
	}
	if value, ok := xuo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: xxx.FieldNumber,
		})
	}
	if value, ok := xuo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: xxx.FieldNumber,
		})
	}
	if xuo.mutation.NumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: xxx.FieldNumber,
		})
	}
	if value, ok := xuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xxx.FieldCreatedAt,
		})
	}
	if value, ok := xuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xxx.FieldUpdatedAt,
		})
	}
	_node = &Xxx{config: xuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xxx.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
